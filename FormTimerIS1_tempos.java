/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package froms;

//import java.awt.Component;
import java.awt.Image;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.*;
//import javax.swing.Icon;
//import javax.swing.ImageIcon;
//import javax.swing.JLabel;
import javax.swing.JOptionPane;
//import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
//import javax.swing.table.TableCellRenderer;

/**
 *
 * @author felipe.dasilva
 */
public class FormTimerIS1_tempos extends javax.swing.JFrame {

    public String url;
    public int vIdAtividade;
    public int vIdTempo;
    public String vAcaoTempos;
    JFrameAtividades listaTarefas;

    /**
     * Creates new form TimerIS
     */
    public FormTimerIS1_tempos() {
        initComponents();
        Image iconImage = Toolkit.getDefaultToolkit().getImage("C:\\TimerIS\\smartwatch.png");
        this.setIconImage(iconImage);        
        this.setDefaultCloseOperation(FormTimerIS1_tempos.DO_NOTHING_ON_CLOSE);
        this.url = "jdbc:sqlite:C:/TimerIS/tempos.db";
        SelectArea();
        SelectCliente();
        SelecttipoAtividade();
        this.vIdAtividade = 2;
        recuperarados(vIdAtividade);
        tablelaTempos(vIdAtividade);
    }

    public FormTimerIS1_tempos(JFrameAtividades listaTarefas) {
        initComponents();
        Image iconImage = Toolkit.getDefaultToolkit().getImage("C:\\TimerIS\\smartwatch.png");
        this.setIconImage(iconImage);        
        this.setDefaultCloseOperation(FormTimerIS1_tempos.DO_NOTHING_ON_CLOSE);
        this.url = "jdbc:sqlite:C:/TimerIS/tempos.db";
        this.listaTarefas = listaTarefas;
        SelectArea();
        SelectCliente();
        SelecttipoAtividade();
    }

    public FormTimerIS1_tempos(JFrameAtividades listaTarefas, int id_Atividade) {
        initComponents();
        Image iconImage = Toolkit.getDefaultToolkit().getImage("C:\\TimerIS\\smartwatch.png");
        this.setIconImage(iconImage);        
        this.setDefaultCloseOperation(FormTimerIS1_tempos.DO_NOTHING_ON_CLOSE);
        this.url = "jdbc:sqlite:C:/TimerIS/tempos.db";
        this.vAcaoTempos = "I";
        this.vIdAtividade = id_Atividade;
        recuperarados(vIdAtividade);
        tablelaTempos(vIdAtividade);
        SelectArea();
        SelectCliente();
        SelecttipoAtividade();

        this.listaTarefas = listaTarefas;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jMenuItem1 = new javax.swing.JMenuItem();
        jLabel3 = new javax.swing.JLabel();
        atividade = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        tipo = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        outros = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Observacao = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        cliente = new javax.swing.JComboBox();
        area = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        dataFinal = new javax.swing.JTextField();
        dataInicial = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();

        jLabel1.setText("jLabel1");

        jMenuItem1.setText("jMenuItem1");

        jLabel3.setText("jLabel3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jLabel4.setText("Atividade ou Chamado");

        tipo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Chamado", "Projeto", "Implementação", "Configuração", "Teste Xray", "Treinamentos", "Apoio a atividades", "Implementações", "Reuniões e Metting", "Respondento Chamados", "Pequenos Projetos", "Prioridade", "Outros" }));

        jLabel5.setText("Tipo de atividade:");

        jLabel6.setText("Outras atividades");

        jButton3.setText("Editar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        Observacao.setColumns(20);
        Observacao.setRows(5);
        jScrollPane1.setViewportView(Observacao);

        jLabel2.setText("Observação");

        jLabel7.setText("Cliente");

        cliente.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Arco Ed. Louveira", "Arco Ed. Jundiaí", "Cabinets Louveira", "Ferrero Pouso Alegre", "Ferrero Guarulhos", "Ledvance Embu das Artes", "Natural One Alb Jarinu", "Natural One Fab Jarinu", "Natural One Tuc Jarinu", "Pearson Louveira", "Royal Enfiend Louvaira", "Unilever Indaiatuba", "Unilever Louveira", "Vários", "Outros", "N/A" }));

        area.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SwiftLog", "Ciel FW", "Ciel MLP", "Ciel FD", "learning", "YMS", "Latromi", "Tableau", "RT", "BO", "Outros", "N/A", "Xray", "Salog" }));

        jLabel8.setText("Sistema");

        jButton4.setText("Sair");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Id", "Dia", "Inicio", "Final", "Tempo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(40);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(50);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(150);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(150);
            jTable1.getColumnModel().getColumn(4).setResizable(false);
            jTable1.getColumnModel().getColumn(4).setPreferredWidth(100);
        }

        jButton1.setText("");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(tipo, 0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(outros, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addComponent(atividade, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cliente, 0, 141, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(area, 0, 141, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jButton4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addComponent(dataInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(dataFinal, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(atividade, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1)
                        .addComponent(dataFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(dataInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(outros, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tipo, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cliente, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(area, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        String sql = "UPDATE atividades SET "
                + "    atividade = ?, "
                + "    tipo = ?, "
                + "    outros = ?, "
                + "    cliente = ?, "
                + "    area = ?, "
                + "    observacao = ? "
                + "WHERE "
                + "    usuario = ? "
                + "    AND id = ?;";

        try (Connection connection = DriverManager.getConnection(this.url);
                PreparedStatement pstmt = connection.prepareStatement(sql)) {

            // Exibir valores antes de inserir
            System.out.println("Atividade: " + atividade.getText());
            System.out.println("Tipo: " + (String) tipo.getSelectedItem());
            System.out.println("Outros: " + outros.getText());
            System.out.println("Cliente: " + (String) cliente.getSelectedItem());
            System.out.println("Área: " + (String) area.getSelectedItem());
            System.out.println("Observação: " + Observacao.getText());

            // Definir valores nos placeholders
            pstmt.setString(1, atividade.getText());
            pstmt.setString(2, (String) tipo.getSelectedItem());
            pstmt.setString(3, outros.getText());
            pstmt.setString(4, (String) cliente.getSelectedItem());
            pstmt.setString(5, (String) area.getSelectedItem());
            pstmt.setString(6, Observacao.getText());
            pstmt.setString(7, System.getProperty("user.name"));
            pstmt.setInt(8, this.vIdAtividade);

            int linhasAfetadas = pstmt.executeUpdate();
            if (linhasAfetadas > 0) {
                System.out.println("Cadastro realizado com sucesso!");
            } else {
                System.out.println("Nenhuma linha foi inserida.");
            }
        } catch (SQLException e) {
            System.err.println("Erro SQL: " + e.getMessage());
            e.printStackTrace(); // Para depuração
        }
        JFrameAtividades form = new JFrameAtividades();
        form.setVisible(true);
        Image iconImage = Toolkit.getDefaultToolkit().getImage("C:\\TimerIS\\smartwatch.png");
        form.setIconImage(iconImage);
        form.setTitle("Nova atividade.");
        this.listaTarefas.TabelaDeAtividades();
        this.dispose();


    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        JFrameAtividades form = new JFrameAtividades();
        form.setVisible(true);
        form.setTitle("Nova atividade.");
        this.listaTarefas.TabelaDeAtividades();
        this.dispose();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        SelecionarLinha();
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        if (this.vAcaoTempos.equals("I")) {
            StringBuilder sb = new StringBuilder();
            sb.append("insert into tempos (id_atividades,dataInicio,dataFinal) values (" + this.vIdAtividade + ",'" + dataInicial.getText() + "','" + dataFinal.getText() + "');");

            try (Connection conn = DriverManager.getConnection(this.url);
                    PreparedStatement pstmt = conn.prepareStatement(sb.toString())) {
                int rowsAffected = pstmt.executeUpdate();
                System.out.println("Atualização bem-sucedida! Linhas afetadas: " + rowsAffected);
            } catch (SQLException e) {
                System.out.println("Erro ao atualizar a filial: " + e.getMessage());

            }
            tablelaTempos(this.vIdAtividade);
            this.vAcaoTempos = "I";
            jButton1.setText("");
            dataFinal.setText("");
            dataInicial.setText("");
        } else if (this.vAcaoTempos.equals("U")) {
            StringBuilder sb = new StringBuilder();
            sb.append("UPDATE tempos SET ");
            sb.append("    dataInicio = '" + dataInicial.getText() + "', ");
            sb.append("    dataFinal = '" + dataFinal.getText() + "' ");
            sb.append("WHERE ");
            sb.append("    id_atividades = " + this.vIdAtividade + " ");
            sb.append("    AND id = " + this.vIdTempo + ";");
            try (Connection conn = DriverManager.getConnection(this.url);
                    PreparedStatement pstmt = conn.prepareStatement(sb.toString())) {
                int rowsAffected = pstmt.executeUpdate();
                System.out.println("Atualização bem-sucedida! Linhas afetadas: " + rowsAffected);
            } catch (SQLException e) {
                System.out.println("Erro ao atualizar a filial: " + e.getMessage());

            }
            System.out.println(sb.toString());
            tablelaTempos(this.vIdAtividade);
            this.vAcaoTempos = "I";
            jButton1.setText("");
            dataFinal.setText("");
            dataInicial.setText("");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        StringBuilder sb = new StringBuilder();
        sb.append("delete from tempos where id =" + this.vIdTempo + ";");
        try (Connection conn = DriverManager.getConnection(this.url);
                PreparedStatement pstmt = conn.prepareStatement(sb.toString())) {
            int rowsAffected = pstmt.executeUpdate();
            System.out.println("Atualização bem-sucedida! Linhas afetadas: " + rowsAffected);
        } catch (SQLException e) {
            System.out.println("Erro ao atualizar a filial: " + e.getMessage());

        }
        tablelaTempos(this.vIdAtividade);
        this.vAcaoTempos = "I";
        dataFinal.setText("");
        dataInicial.setText("");
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormTimerIS1_tempos.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormTimerIS1_tempos.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormTimerIS1_tempos.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormTimerIS1_tempos.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormTimerIS1_tempos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea Observacao;
    private javax.swing.JComboBox area;
    private javax.swing.JTextField atividade;
    private javax.swing.JComboBox cliente;
    private javax.swing.JTextField dataFinal;
    private javax.swing.JTextField dataInicial;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField outros;
    private javax.swing.JComboBox tipo;
    // End of variables declaration//GEN-END:variables

    public void SelecttipoAtividade() {
        StringBuilder sb = new StringBuilder();
        sb.append("select Nome from tipoAtividade");

        try (Connection connection = DriverManager.getConnection(this.url);
                PreparedStatement statement = connection.prepareStatement(sb.toString());
                ResultSet resultSet = statement.executeQuery()) {

            while (resultSet.next()) {
                tipo.addItem(resultSet.getString("Nome"));
            }
        } catch (SQLException e) {
            e.printStackTrace(); // Para fins de depuração
            JOptionPane.showMessageDialog(null, "Erro ao carregar dados", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void SelectCliente() {
        StringBuilder sb = new StringBuilder();
        sb.append("select Nome from clientes");

        try (Connection connection = DriverManager.getConnection(this.url);
                PreparedStatement statement = connection.prepareStatement(sb.toString());
                ResultSet resultSet = statement.executeQuery()) {

            while (resultSet.next()) {
                cliente.addItem(resultSet.getString("Nome"));
            }
        } catch (SQLException e) {
            e.printStackTrace(); // Para fins de depuração
            JOptionPane.showMessageDialog(null, "Erro ao carregar dados", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void SelectArea() {
        StringBuilder sb = new StringBuilder();
        sb.append("select Nome from area");
        try (Connection connection = DriverManager.getConnection(this.url);
                PreparedStatement statement = connection.prepareStatement(sb.toString());
                ResultSet resultSet = statement.executeQuery()) {

            while (resultSet.next()) {
                area.addItem(resultSet.getString("Nome"));
            }
        } catch (SQLException e) {
            e.printStackTrace(); // Para fins de depuração
            JOptionPane.showMessageDialog(null, "Erro ao carregar dados", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void recuperarados(int id_Atividade) {
        String sql = "select usuario, atividade, tipo, outros, cliente, area, observacao from atividades where id =" + id_Atividade;
        try (Connection connection = DriverManager.getConnection(this.url);
                PreparedStatement statement = connection.prepareStatement(sql);
                ResultSet resultSet = statement.executeQuery()) {
            {

                while (resultSet.next()) {
                    atividade.setText(resultSet.getString("atividade"));
                    tipo.setSelectedItem(resultSet.getString("tipo"));
                    outros.setText(resultSet.getString("outros"));
                    cliente.setSelectedItem(resultSet.getString("cliente"));
                    area.setSelectedItem(resultSet.getString("area"));
                    Observacao.setText(resultSet.getString("observacao"));
                }
            }

        } catch (SQLException e) {
            e.printStackTrace(); // Para fins de depuração
            JOptionPane.showMessageDialog(null, "Erro ao carregar dados", "Erro", JOptionPane.ERROR_MESSAGE);
        }

    }

    public void tablelaTempos(int id_Atividade) {
        StringBuilder sb = new StringBuilder();
        sb.append("SELECT ");
        sb.append("    id, ");
        sb.append("    dataInicio, ");
        sb.append("    dataFinal, ");
        sb.append("    printf('%02d:%02d:%02d', ");
        sb.append("        (strftime('%s', COALESCE(dataFinal, CURRENT_TIMESTAMP)) - strftime('%s', dataInicio)) / 3600, "); // horas
        sb.append("        ((strftime('%s', COALESCE(dataFinal, CURRENT_TIMESTAMP)) - strftime('%s', dataInicio)) % 3600) / 60, "); // minutos
        sb.append("        (strftime('%s', COALESCE(dataFinal, CURRENT_TIMESTAMP)) - strftime('%s', dataInicio)) % 60 "); // segundos
        sb.append("    ) AS tempo_decorrido, ");
        sb.append("    CASE strftime('%w', dataInicio) ");
        sb.append("        WHEN '0' THEN 'Dom' ");
        sb.append("        WHEN '1' THEN 'Seg' ");
        sb.append("        WHEN '2' THEN 'Ter' ");
        sb.append("        WHEN '3' THEN 'Qua' ");
        sb.append("        WHEN '4' THEN 'Qui' ");
        sb.append("        WHEN '5' THEN 'Sext' ");
        sb.append("        WHEN '6' THEN 'Sáb' ");
        sb.append("    END AS dia_semana ");
        sb.append("FROM tempos ");
        sb.append("WHERE id_atividades = " + id_Atividade + ";");

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);

        try (Connection connection = DriverManager.getConnection(this.url);
                PreparedStatement statement = connection.prepareStatement(sb.toString());
                ResultSet resultSet = statement.executeQuery()) {

            while (resultSet.next()) {
                jTable1.setRowHeight(25); // Define uma altura de 25 pixels, ajuste conforme necessário
                model.addRow(new Object[]{
                    resultSet.getInt("id"),
                    resultSet.getString("dia_semana"),
                    resultSet.getString("dataInicio"),
                    resultSet.getString("dataFinal"),
                    resultSet.getString("tempo_decorrido")
                });
            }

        } catch (SQLException e) {
            e.printStackTrace(); // Para fins de depuração
            JOptionPane.showMessageDialog(null, "Erro ao carregar dados", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void SelecionarLinha() {
        int linhaSelecionada = jTable1.getSelectedRow();
        if (linhaSelecionada != -1) { // Verifica se alguma linha foi selecionada
            Object id = jTable1.getValueAt(linhaSelecionada, 0); // Obtém o valor da célula
            Object obsInicial = jTable1.getValueAt(linhaSelecionada, 2); // Obtém o valor da célula
            Object obsFinalizar = jTable1.getValueAt(linhaSelecionada, 3); // Obtém o valor da célula
            dataInicial.setText((String) obsInicial);
            dataFinal.setText((String) obsFinalizar);
            this.vIdTempo = (Integer) id;
            this.vAcaoTempos = "U";
            jButton1.setText("");
        } else {
            System.out.println("Nenhuma linha selecionada.");
        }

    }

}
