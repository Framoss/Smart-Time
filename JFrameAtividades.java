/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package froms;

import Portable.ConstruirPastas;
import Portable.MeuTimer;
import java.awt.AWTException;
import java.awt.Color;
import java.awt.Component;
import java.awt.Image;
import java.awt.MenuItem;
import java.awt.PopupMenu;
import java.awt.SystemTray;
import java.awt.Toolkit;
import java.awt.TrayIcon;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.filechooser.FileSystemView;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;

/**
 *
 * @author felipe.dasilva
 */
public class JFrameAtividades extends javax.swing.JFrame {

    public int vId;
    public int vLinhaSelecionada;
    public String url;
    MeuTimer meuTimer = new MeuTimer();

    /**
     * Creates new form JFrameAtividades
     */
    public JFrameAtividades() {
        ConstruirPastas n = new ConstruirPastas();
        this.url = "jdbc:sqlite:C:/TimerIS/tempos.db";

        System.out.println(url);

        initComponents();
        Image iconImage = Toolkit.getDefaultToolkit().getImage("C:\\TimerIS\\smartwatch.png");
        this.setIconImage(iconImage);

        getContentPane().setBackground(Color.decode("#303030"));

        TabelaDeAtividades();
        Text_Atividade.setText("");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem10 = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        Text_Atividade = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu7 = new javax.swing.JMenu();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem17 = new javax.swing.JMenuItem();
        jMenuItem18 = new javax.swing.JMenuItem();
        jMenuItem19 = new javax.swing.JMenuItem();
        jMenuItem20 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem15 = new javax.swing.JMenuItem();
        jMenuItem16 = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        jMenuItem14 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenuItem13 = new javax.swing.JMenuItem();
        jMenuItem21 = new javax.swing.JMenuItem();
        jMenuItem12 = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        jMenuItem2.setText("jMenuItem2");

        jMenuItem9.setText("jMenuItem9");

        jMenu1.setText("File");
        jMenuBar2.add(jMenu1);

        jMenu3.setText("Edit");
        jMenuBar2.add(jMenu3);

        jMenuItem10.setText("jMenuItem10");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Status", "Tipo", "Atividade", "Cliente", "Data", "Tempo Min"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setMinWidth(40);
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(40);
            jTable1.getColumnModel().getColumn(0).setMaxWidth(40);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(10);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(120);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(260);
            jTable1.getColumnModel().getColumn(4).setResizable(false);
            jTable1.getColumnModel().getColumn(4).setPreferredWidth(25);
            jTable1.getColumnModel().getColumn(5).setResizable(false);
            jTable1.getColumnModel().getColumn(5).setPreferredWidth(40);
            jTable1.getColumnModel().getColumn(6).setMinWidth(80);
            jTable1.getColumnModel().getColumn(6).setPreferredWidth(80);
            jTable1.getColumnModel().getColumn(6).setMaxWidth(80);
        }

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/play_circle_filled_16dp_15FA05.png"))); // NOI18N
        jButton1.setToolTipText("Start Path (Ctrl + Alt + I)");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/pause_circle_16dp_FA0000.png"))); // NOI18N
        jButton2.setToolTipText("Stop Path (Ctrl + Alt + P)");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        Text_Atividade.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        Text_Atividade.setText("Chamado: 39030029");

        jLabel2.setText("Atividade");

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/outbox_16dp_2854C5.png"))); // NOI18N
        jButton3.setToolTipText("Archive Path (Ctrl + Alt + A)");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/delete_16dp_FA0000.png"))); // NOI18N
        jButton4.setToolTipText("Archive Path (Ctrl + Alt + D)");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/app_registration_16dp_2854C5.png"))); // NOI18N
        jButton5.setToolTipText("Edit Path (Ctrl + Alt + E)");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jMenu2.setText("Opções");

        jMenu5.setText("Cadastros");

        jMenuItem8.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem8.setText("Cadastro de atividade");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem8);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem5.setText("Cadastro de tipos de atividade");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem5);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText("Cadastro de sistema");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem4);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("Cadastro de clientes");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem3);

        jMenu2.add(jMenu5);

        jMenu7.setText("Ações");

        jMenuItem7.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem7.setText("Editar tarefa selecionada");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu7.add(jMenuItem7);

        jMenuItem17.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem17.setText("Iniciar a contagem de tempo");
        jMenuItem17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem17ActionPerformed(evt);
            }
        });
        jMenu7.add(jMenuItem17);

        jMenuItem18.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem18.setText("Pausar a contagem de tempo");
        jMenuItem18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem18ActionPerformed(evt);
            }
        });
        jMenu7.add(jMenuItem18);

        jMenuItem19.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem19.setText("Arquivar tarefa");
        jMenuItem19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem19ActionPerformed(evt);
            }
        });
        jMenu7.add(jMenuItem19);

        jMenuItem20.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem20.setText("Deletar tarefa");
        jMenuItem20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem20ActionPerformed(evt);
            }
        });
        jMenu7.add(jMenuItem20);

        jMenu2.add(jMenu7);

        jMenu4.setText("Relatórios");

        jMenuItem15.setText("Relatório de Atividades");
        jMenuItem15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem15ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem15);

        jMenuItem16.setText("Relatório de Atividades com data");
        jMenuItem16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem16ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem16);

        jMenu2.add(jMenu4);

        jMenu6.setText("Integração");

        jMenuItem14.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem14.setText("Sincronizar com banco");
        jMenuItem14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem14ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem14);

        jMenu2.add(jMenu6);

        jMenuItem11.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem11.setText("Executar em segundo plano");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem11);

        jMenuItem13.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem13.setText("Executar formato Mini");
        jMenuItem13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem13ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem13);

        jMenuItem21.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem21.setText("Atualizar principal");
        jMenuItem21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem21ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem21);

        jMenuItem12.setText("Sair");
        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem12ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem12);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Text_Atividade, javax.swing.GroupLayout.DEFAULT_SIZE, 495, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Text_Atividade, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 407, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        stop();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        arquivar();
    }//GEN-LAST:event_jButton3ActionPerformed
    public void arquivar() {
        if (this.vId != 0) {
            String sql = "UPDATE atividades SET status = 0 WHERE id = " + this.vId;

            try (Connection conn = DriverManager.getConnection(this.url);
                    PreparedStatement pstmt = conn.prepareStatement(sql)) {
                int rowsAffected = pstmt.executeUpdate();

            } catch (SQLException e) {
                System.out.println("Erro ao atualizar a filial: " + e.getMessage());

            }
        }
        TabelaDeAtividades();
        this.vId = 0;
    }
    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        JFrameClientes n = new JFrameClientes();
        n.setVisible(true);
        n.setTitle("Cadastro de clientes");
        this.dispose();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        JFrameArea n = new JFrameArea();
        n.setVisible(true);
        n.setTitle("Cadastro de sistema");
        this.dispose();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        JFrameTipoAtividade n = new JFrameTipoAtividade();
        n.setVisible(true);
        n.setTitle("Cadastro tipo de atividade");
        this.dispose();
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        FormTimerIS1_tempos n = new FormTimerIS1_tempos(this, this.vId);
        n.setVisible(true);
        n.setTitle("Edidar a atividade");
        this.dispose();
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        FormTimerIS n = new FormTimerIS(this);
        n.setVisible(true);
        n.setTitle("Cadastro de atividade");
        this.dispose();
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (VerificarTarefasAbertas()) {
            play();
        } else {

        }


    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        SelecionarLinha();        // TODO add your handling code here:
    }//GEN-LAST:event_jTable1MouseClicked

    private void jMenuItem15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem15ActionPerformed
        JFileChooser fileChooser = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int escolha = fileChooser.showOpenDialog(null);
        StringBuilder csv = new StringBuilder();
        String cabecalho = "id;tipo;atividade;cliente;data_criacao;tempo\n";
        csv.append(cabecalho);

        StringBuilder sb = new StringBuilder();
        sb.append("with activity as ( ");
        sb.append("	select ");
        sb.append("		atividades.id,");
        sb.append("		atividades.tipo,");
        sb.append("		atividades.atividade,");
        sb.append("		atividades.cliente,");
        sb.append("		strftime('%d/%m/%Y', atividades.data) as data_criacao ");
        sb.append("	from ");
        sb.append("		atividades ");
        sb.append("	where");
        sb.append("		atividades.usuario = '" + System.getProperty("user.name") + "'  and atividades.status = 1");
        sb.append("), timer as (");
        sb.append("	select ");
        sb.append("		tempos.id,");
        sb.append("		tempos.id_atividades,");
        sb.append("		tempos.dataInicio,");
        sb.append("		tempos.dataFinal");
        sb.append("	from ");
        sb.append("		tempos ");
        sb.append(" where dataFinal is null) ");
        sb.append(", resumo as (select id_atividades,sum((strftime('%s', dataFinal) - strftime('%s', dataInicio)))/60 AS tempo from tempos");
        sb.append(" where dataFinal is not null group by id_atividades )");
        sb.append("	select ");
        sb.append("		activity.id,");
        sb.append("		activity.tipo,");
        sb.append("		activity.atividade,");
        sb.append("		activity.cliente,");
        sb.append("		activity.data_criacao, case when resumo.tempo is null then 0 else resumo.tempo end tempo,");
        sb.append("		case when timer.dataFinal is not null or timer.id is null then 'stop' else 'play' end img");
        sb.append("	from ");
        sb.append("		activity left join timer on (activity.id = timer.id_atividades) left join resumo on (activity.id = resumo.id_atividades)");
        int result = 0;

        try (Connection connection = DriverManager.getConnection(this.url);
                PreparedStatement statement = connection.prepareStatement(sb.toString());
                ResultSet resultSet = statement.executeQuery()) {

            while (resultSet.next()) {
                csv.append(resultSet.getString("id") + ";");
                csv.append(resultSet.getString("tipo") + ";");
                csv.append(resultSet.getString("atividade") + ";");
                csv.append(resultSet.getString("cliente") + ";");
                csv.append(resultSet.getString("data_criacao") + ";");
                csv.append(resultSet.getString("tempo") + "\n");
            }

        } catch (SQLException e) {
            e.printStackTrace(); // Para fins de depuração
            JOptionPane.showMessageDialog(null, "Erro ao carregar dados", "Erro", JOptionPane.ERROR_MESSAGE);
        }
        String File_name = fileChooser.getSelectedFile() + "\\" + "Atividades.csv";

        try (FileWriter writer = new FileWriter(File_name)) {
            writer.append(csv.toString());

        } catch (IOException e) {
            System.err.println("Erro ao criar o arquivo CSV: " + e.getMessage());
        }

    }//GEN-LAST:event_jMenuItem15ActionPerformed

    private void jMenuItem16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem16ActionPerformed
        JFileChooser fileChooser = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int escolha = fileChooser.showOpenDialog(null);
        StringBuilder csv = new StringBuilder();
        String cabecalho = "id;status;tipo;atividade;cliente;sistema;data_criacao;Inicio_tarefa;Final_tarefa;Minutos\n";
        csv.append(cabecalho);

        StringBuilder sb = new StringBuilder();
        sb.append("with activity as ( ");
        sb.append("	select ");
        sb.append("		atividades.id,");
        sb.append("		atividades.tipo,");
        sb.append("		atividades.atividade,");
        sb.append("		atividades.cliente,");
        sb.append("		atividades.area as sistema,");
        sb.append("		strftime('%d/%m/%Y', atividades.data) as data_criacao,");
        sb.append("		atividades.status");
        sb.append("	from ");
        sb.append("		atividades ");
        sb.append("	where");
        sb.append("		atividades.usuario = '" + System.getProperty("user.name") + "' ");
        sb.append("), timer as (");
        sb.append("	select ");
        sb.append("		tempos.id,");
        sb.append("		tempos.id_atividades,");
        sb.append("		tempos.dataInicio,");
        sb.append("		tempos.dataFinal");
        sb.append("	from ");
        sb.append("		tempos ");
        sb.append(" where dataFinal is not null) ");
        sb.append(", resumo as (select id_atividades,sum((strftime('%s', dataFinal) - strftime('%s', dataInicio)))/60 AS tempo from tempos");
        sb.append(" where dataFinal is not null group by id_atividades )");
        sb.append("	select ");
        sb.append("		activity.id,");
        sb.append("		case when activity.status = 1 then 'Ativo' else 'Arquivado' end as status,");
        sb.append("		activity.tipo,");
        sb.append("		activity.atividade,");
        sb.append("		activity.cliente,");
        sb.append("		activity.sistema,");
        sb.append("		activity.data_criacao, ");
        sb.append("		strftime('%d/%m/%Y %H:%M:%S', timer.dataInicio) as Inicio_tarefa,");
        sb.append("		strftime('%d/%m/%Y %H:%M:%S', timer.dataFinal) as Final_tarefa,");
        sb.append("		(strftime('%s', timer.dataFinal) - strftime('%s', timer.dataInicio))/60 as Minutos");
        sb.append("	from ");
        sb.append("		activity left join timer on (activity.id = timer.id_atividades) left join resumo on (activity.id = resumo.id_atividades)");
        sb.append("	order by 6 desc");
        int result = 0;

        try (Connection connection = DriverManager.getConnection(this.url);
                PreparedStatement statement = connection.prepareStatement(sb.toString());
                ResultSet resultSet = statement.executeQuery()) {
            //id;status;tipo;atividade;cliente;sistema;data_criacao;Inicio_tarefa;Final_tarefa;Minutos
            while (resultSet.next()) {
                csv.append(resultSet.getString("id") + ";");
                csv.append(resultSet.getString("status") + ";");
                csv.append(resultSet.getString("tipo") + ";");
                csv.append(resultSet.getString("atividade") + ";");
                csv.append(resultSet.getString("cliente") + ";");
                csv.append(resultSet.getString("sistema") + ";");
                csv.append(resultSet.getString("data_criacao") + ";");
                csv.append(resultSet.getString("Inicio_tarefa") + ";");
                csv.append(resultSet.getString("Final_tarefa") + ";");
                csv.append(resultSet.getString("Minutos") + "\n");
            }

        } catch (SQLException e) {
            e.printStackTrace(); // Para fins de depuração
            JOptionPane.showMessageDialog(null, "Erro ao carregar dados", "Erro", JOptionPane.ERROR_MESSAGE);
        }
        String File_name = fileChooser.getSelectedFile() + "\\" + "Relatório de Atividades com data.csv";

        try (FileWriter writer = new FileWriter(File_name)) {
            writer.append(csv.toString());

        } catch (IOException e) {
            System.err.println("Erro ao criar o arquivo CSV: " + e.getMessage());
        }
    }//GEN-LAST:event_jMenuItem16ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        deletar();

    }//GEN-LAST:event_jButton4ActionPerformed
    public void deletar() {
        if (this.vId != 0) {
            String sql = "delete from atividades where id = " + this.vId;

            try (Connection conn = DriverManager.getConnection(this.url);
                    PreparedStatement pstmt = conn.prepareStatement(sql)) {
                int rowsAffected = pstmt.executeUpdate();

            } catch (SQLException e) {
                System.out.println("Erro ao atualizar a filial: " + e.getMessage());

            }
        }
        TabelaDeAtividades();
        this.vId = 0;
    }
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        editar();
        this.dispose();
    }//GEN-LAST:event_jButton5ActionPerformed
    public void editar() {
        FormTimerIS1_tempos n = new FormTimerIS1_tempos(this, this.vId);
        n.setVisible(true);
        n.setTitle("Edidar a atividade");
    }
    private void jMenuItem12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem12ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jMenuItem12ActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        meuTimer.start();
        Bandeja_sistema();
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void jMenuItem14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem14ActionPerformed
        ImportarDados n = new ImportarDados();
        n.setTitle("Importar dados");
        n.setVisible(true);
    }//GEN-LAST:event_jMenuItem14ActionPerformed

    private void jMenuItem17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem17ActionPerformed
        play();
    }//GEN-LAST:event_jMenuItem17ActionPerformed

    private void jMenuItem18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem18ActionPerformed
        stop();
    }//GEN-LAST:event_jMenuItem18ActionPerformed

    private void jMenuItem19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem19ActionPerformed
        arquivar();        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem19ActionPerformed

    private void jMenuItem20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem20ActionPerformed
        deletar();        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem20ActionPerformed

    private void jMenuItem13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem13ActionPerformed
        JFrameAtividadesMini n = new JFrameAtividadesMini();
        this.dispose();
        n.setVisible(true);
    }//GEN-LAST:event_jMenuItem13ActionPerformed

    private void jMenuItem21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem21ActionPerformed
        TabelaDeAtividades();
    }//GEN-LAST:event_jMenuItem21ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrameAtividades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrameAtividades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrameAtividades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrameAtividades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrameAtividades().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Text_Atividade;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem14;
    private javax.swing.JMenuItem jMenuItem15;
    private javax.swing.JMenuItem jMenuItem16;
    private javax.swing.JMenuItem jMenuItem17;
    private javax.swing.JMenuItem jMenuItem18;
    private javax.swing.JMenuItem jMenuItem19;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem20;
    private javax.swing.JMenuItem jMenuItem21;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    public void SelecionarLinha() {
        int linhaSelecionada = jTable1.getSelectedRow();
        if (linhaSelecionada != -1) { // Verifica se alguma linha foi selecionada
            Object id = jTable1.getValueAt(linhaSelecionada, 0); // Obtém o valor da célula
            Object atividade = jTable1.getValueAt(linhaSelecionada, 3); // Obtém o valor da célula
            this.vLinhaSelecionada = linhaSelecionada;
            this.vId = (Integer) id;
            Text_Atividade.setText((String) atividade);
        } else {
            System.out.println("Nenhuma linha selecionada.");
        }

    }

    public void TabelaDeAtividades() {
        //JOptionPane.showMessageDialog(null, "Dentro da função TabelaDeAtividades", "TabelaDeAtividades", JOptionPane.ERROR_MESSAGE);
        StringBuilder sb = new StringBuilder();
        sb.append("WITH activity AS (");
        sb.append("    SELECT atividades.id, ");
        sb.append("           atividades.tipo, ");
        sb.append("           atividades.atividade, ");
        sb.append("           atividades.cliente, ");
        sb.append("           strftime('%d/%m/%Y', atividades.data) AS data_criacao ");
        sb.append("    FROM atividades ");
        sb.append("    WHERE atividades.usuario = '" + System.getProperty("user.name") + "' ");
        sb.append("          AND atividades.status = 1 ");
        sb.append("), ");
        sb.append("timer AS ( ");
        sb.append("    SELECT tempos.id, ");
        sb.append("           tempos.id_atividades, ");
        sb.append("           tempos.dataInicio, ");
        sb.append("           tempos.dataFinal ");
        sb.append("    FROM tempos ");
        sb.append("    WHERE dataFinal IS NULL ");
        sb.append("), ");
        sb.append("resumo AS ( ");
        sb.append("    SELECT id_atividades, ");
        sb.append("           printf('%02d:%02d:%02d', ");
        sb.append("                  SUM((strftime('%s', dataFinal) - strftime('%s', dataInicio))) / 3600, "); // horas
        sb.append("                  (SUM((strftime('%s', dataFinal) - strftime('%s', dataInicio))) % 3600) / 60, "); // minutos
        sb.append("                  SUM((strftime('%s', dataFinal) - strftime('%s', dataInicio))) % 60 "); // segundos
        sb.append("           ) AS tempo ");
        sb.append("    FROM tempos ");
        sb.append("    WHERE dataFinal IS NOT NULL ");
        sb.append("    GROUP BY id_atividades ");
        sb.append(") ");
        sb.append("SELECT activity.id, ");
        sb.append("       activity.tipo, ");
        sb.append("       activity.atividade, ");
        sb.append("       activity.cliente, ");
        sb.append("       activity.data_criacao, ");
        sb.append("       COALESCE(resumo.tempo, '00:00:00') AS tempo, "); // Garante que valores nulos sejam exibidos como 00:00:00
        sb.append("       CASE ");
        sb.append("           WHEN timer.dataFinal IS NOT NULL OR timer.id IS NULL THEN 'stop' ");
        sb.append("           ELSE 'play' ");
        sb.append("       END AS img ");
        sb.append("FROM activity ");
        sb.append("LEFT JOIN timer ON (activity.id = timer.id_atividades) ");
        sb.append("LEFT JOIN resumo ON (activity.id = resumo.id_atividades); ");

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);

        try (Connection connection = DriverManager.getConnection(this.url);
                PreparedStatement statement = connection.prepareStatement(sb.toString());
                ResultSet resultSet = statement.executeQuery()) {

            while (resultSet.next()) {
                jTable1.setRowHeight(25); // Define uma altura de 25 pixels, ajuste conforme necessário
                if (resultSet.getString("img").equals("play")) {

                    model.addRow(new Object[]{
                        resultSet.getInt("id"),
                        new ImageIcon("C:\\TimerIS\\play48x48.png"),
                        resultSet.getString("tipo"),
                        resultSet.getString("atividade"),
                        resultSet.getString("cliente"),
                        resultSet.getString("data_criacao"),
                        resultSet.getString("tempo")
                    });
                    jTable1.getColumnModel().getColumn(1).setCellRenderer(new TableCellRenderer() {
                        @Override
                        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                            if (value instanceof Icon) {
                                return new JLabel((Icon) value);
                            }
                            return new JLabel("Sem imagem");
                        }
                    });
                } else {
                    model.addRow(new Object[]{
                        resultSet.getInt("id"),
                        new ImageIcon("C:\\TimerIS\\stop48x48.png"),
                        resultSet.getString("tipo"),
                        resultSet.getString("atividade"),
                        resultSet.getString("cliente"),
                        resultSet.getString("data_criacao"),
                        resultSet.getString("tempo")
                    });
                    jTable1.getColumnModel().getColumn(1).setCellRenderer(new TableCellRenderer() {
                        @Override
                        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                            if (value instanceof Icon) {
                                return new JLabel((Icon) value);
                            }
                            return new JLabel("Sem imagem");
                        }
                    });
                }
            }

        } catch (SQLException e) {
            e.printStackTrace(); // Para fins de depuração
            JOptionPane.showMessageDialog(null, "Erro ao carregar dados", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    public int linhasTabela(String table) throws SQLException {
        int line = 0;
        String sql = "";
        switch (table) {
            case "atividades":
                sql = "SELECT count(id) As linha FROM atividades ";
                break;
            case "cursos":
                sql = "";
                break;
            // Caso padrão, se nenhum dos valores acima for correspondente
            case "frequencias":
                sql = "";
                break;
            case "funcionarios":
                sql = "";
                break;
            // Caso padrão, se nenhum dos valores acima for correspondente            
            case "matriculas":
                sql = "";
                break;
            case "pagamentos_matricula":
                sql = "";
                break;
            case "pagamentos_pendentes":
                sql = "";
                break;
            case "produtos":
                sql = "";
                break;

            // Caso padrão, se nenhum dos valores acima for correspondente             
            default:
                // Código para o caso padrão
                break;
        }
        try (Connection connection = DriverManager.getConnection(this.url);
                PreparedStatement statement = connection.prepareStatement(sql);
                ResultSet resultSet = statement.executeQuery()) {

            // Itera sobre o resultado e adiciona as linhas na jTable
            while (resultSet.next()) {
                line = resultSet.getInt("linha");
            }
        } catch (SQLException e) {
            e.printStackTrace(); // Para fins de depuração
            JOptionPane.showMessageDialog(null, "Erro ao carregar dados", "Erro", JOptionPane.ERROR_MESSAGE);
        }
        return line;
    }

    public void Bandeja_sistema() {
        // Verificar se o sistema suporta a bandeja
        if (!SystemTray.isSupported()) {
            System.out.println("Bandeja do sistema não suportada.");
            return;
        }

        // Criar o ícone de bandeja  https://www.iconfinder.com/search?q=timer
        SystemTray systemTray = SystemTray.getSystemTray();
        TrayIcon trayIcon = new TrayIcon(Toolkit.getDefaultToolkit().getImage("C:\\TimerIS\\smartwatch.png"));

        // Adicionar um menu para o ícone
        PopupMenu popup = new PopupMenu();
        MenuItem exitItem = new MenuItem("Sair");
        MenuItem OpenItem = new MenuItem("Abrir");

        exitItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                System.exit(0);  // Fechar o aplicativo quando o item "Sair" for clicado
            }
        });

        OpenItem.addActionListener(e -> {
            this.setVisible(true);  // Reabre a janela quando clicado na bandeja
            this.setExtendedState(this.NORMAL);  // Restaura o estado da janela
            systemTray.remove(trayIcon);
            meuTimer.close();
        });

        popup.add(exitItem);
        popup.add(OpenItem);
        trayIcon.setPopupMenu(popup);

        // Adicionar o ícone à bandeja
        try {
            systemTray.add(trayIcon);
        } catch (AWTException e) {
            e.printStackTrace();
        }

        // Deixar o aplicativo rodando em segundo plano
        trayIcon.displayMessage("Aplicativo", "O aplicativo está rodando em segundo plano!", TrayIcon.MessageType.INFO);
        setVisible(false);
    }

    @Override
    public void setVisible(boolean b) {
        super.setVisible(b); //To change body of generated methods, choose Tools | Templates.
    }

    public void play() {
        if (this.vId != 0) {
            String sql = "INSERT INTO tempos (id_atividades) VALUES (?)";

            try (Connection connection = DriverManager.getConnection(this.url);
                    PreparedStatement pstmt = connection.prepareStatement(sql)) {

                // Exibir valores antes de inserir
                // Definir valores nos placeholders
                pstmt.setInt(1, this.vId);

                int linhasAfetadas = pstmt.executeUpdate();
                if (linhasAfetadas > 0) {

                } else {
                    System.out.println("Nenhuma tempo foi inserida.");
                }
            } catch (SQLException e) {
                System.err.println("Erro SQL: " + e.getMessage());
                e.printStackTrace(); // Para depuração
            }

        } else {
        }

        TabelaDeAtividades();
        jTable1.setRowSelectionInterval(vLinhaSelecionada, vLinhaSelecionada);
    }

    public void stop() {
        if (this.vId != 0) {
            String sql = "UPDATE tempos SET dataFinal = DATETIME('now', '-3 hours') WHERE dataFinal is null and id_atividades = " + this.vId;

            try (Connection conn = DriverManager.getConnection(this.url);
                    PreparedStatement pstmt = conn.prepareStatement(sql)) {
                int rowsAffected = pstmt.executeUpdate();

            } catch (SQLException e) {
                System.out.println("Erro ao atualizar a filial: " + e.getMessage());

            }
        }
        TabelaDeAtividades();
        jTable1.setRowSelectionInterval(vLinhaSelecionada, vLinhaSelecionada);
    }

    public boolean VerificarTarefasAbertas() {

        String sql = "select count(id_atividades) as id_atividades from tempos where dataFinal is null";
        int y = 0;
        boolean avaliacao = false;
        try (Connection connection = DriverManager.getConnection(this.url);
                PreparedStatement statement = connection.prepareStatement(sql);
                ResultSet resultSet = statement.executeQuery()) {
            while (resultSet.next()) {
                y = resultSet.getInt("id_atividades");
                if (y == 0) {
                    avaliacao = true;
                } else {
                    avaliacao = false;
                }
            }

        } catch (SQLException e) {
            e.printStackTrace(); // Para fins de depuração
            JOptionPane.showMessageDialog(null, "Erro ao carregar dados", "Erro", JOptionPane.ERROR_MESSAGE);
        }

        TabelaDeAtividades();
        jTable1.setRowSelectionInterval(vLinhaSelecionada, vLinhaSelecionada);

        return avaliacao;
    }

    public void TabelaDeAtividades2() {
        StringBuilder sb = new StringBuilder();
        sb.append("WITH activity AS (");
        sb.append("    SELECT atividades.id, ");
        sb.append("           atividades.tipo, ");
        sb.append("           atividades.atividade, ");
        sb.append("           atividades.cliente, ");
        sb.append("           strftime('%d/%m/%Y', atividades.data) AS data_criacao ");
        sb.append("    FROM atividades ");
        sb.append("    WHERE atividades.usuario = '" + System.getProperty("user.name") + "' ");
        sb.append("          AND atividades.status = 1 ");
        sb.append("), ");
        sb.append("timer AS ( ");
        sb.append("    SELECT tempos.id, ");
        sb.append("           tempos.id_atividades, ");
        sb.append("           tempos.dataInicio, ");
        sb.append("           tempos.dataFinal ");
        sb.append("    FROM tempos ");
        sb.append("    WHERE dataFinal IS NULL ");
        sb.append("), ");
        sb.append("resumo AS ( ");
        sb.append("    SELECT id_atividades, ");
        sb.append("           printf('%02d:%02d:%02d', ");
        sb.append("                  SUM((strftime('%s', dataFinal) - strftime('%s', dataInicio))) / 3600, "); // horas
        sb.append("                  (SUM((strftime('%s', dataFinal) - strftime('%s', dataInicio))) % 3600) / 60, "); // minutos
        sb.append("                  SUM((strftime('%s', dataFinal) - strftime('%s', dataInicio))) % 60 "); // segundos
        sb.append("           ) AS tempo ");
        sb.append("    FROM tempos ");
        sb.append("    WHERE dataFinal IS NOT NULL ");
        sb.append("    GROUP BY id_atividades ");
        sb.append(") ");
        sb.append("SELECT activity.id, ");
        sb.append("       activity.tipo, ");
        sb.append("       activity.atividade, ");
        sb.append("       activity.cliente, ");
        sb.append("       activity.data_criacao, ");
        sb.append("       COALESCE(resumo.tempo, '00:00:00') AS tempo, "); // Garante que valores nulos sejam exibidos como 00:00:00
        sb.append("       CASE ");
        sb.append("           WHEN timer.dataFinal IS NOT NULL OR timer.id IS NULL THEN 'stop' ");
        sb.append("           ELSE 'play' ");
        sb.append("       END AS img ");
        sb.append("FROM activity ");
        sb.append("LEFT JOIN timer ON (activity.id = timer.id_atividades) ");
        sb.append("LEFT JOIN resumo ON (activity.id = resumo.id_atividades); ");

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
        //JOptionPane.showMessageDialog(null, sb.toString(), "Erro", JOptionPane.ERROR_MESSAGE);
        try (Connection connection = DriverManager.getConnection(this.url);
                PreparedStatement statement = connection.prepareStatement(sb.toString());
                ResultSet resultSet = statement.executeQuery()) {

            while (resultSet.next()) {
                    model.addRow(new Object[]{
                        resultSet.getInt("id"),
                        "play",
                        resultSet.getString("tipo"),
                        resultSet.getString("atividade"),
                        resultSet.getString("cliente"),
                        resultSet.getString("data_criacao"),
                        resultSet.getString("tempo")
                    });
            }

        } catch (SQLException e) {
            e.printStackTrace(); // Para fins de depuração
            JOptionPane.showMessageDialog(null, "Erro ao carregar dados", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

}
